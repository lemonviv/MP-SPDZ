# coding: latin-1
"""
  Provide logistic function MPC computation for falcon project

  Specifically, this program does in three steps:
  (1) First, keep waiting enough clients (equals to party_num) connected to this program.
  (2) Second, once enough clients connected, read the input values and compute the logistic function.
  (3) Third, return the gfp results (in the secret shared form) to the clients.

  Need to set the following parameters before running:
  (1) ARRAY_SIZE: equals to batch size in the falcon project;
  (2) MAX_NUM_CLIENTS: equals to party number in the falcon project;
  (3) FIXED_F: must be consistent with the SPDZ_PRECISION in the falcon project;
  (4) PORT_NUM: equals to the SPDZ_PORT_BASE in the falcon project;

  Note each client connects in a single thread and so is potentially blocked.
  Each round / game will reset and so this runs indefinitiely.
"""

from Compiler.types import sint, regint, Array, MemValue
from Compiler.library import print_ln, do_while, for_range
from Compiler.util import if_else
from Compiler import mpc_math, floatingpoint
from random import seed, randrange
from Compiler.program import Program
import ml

### set the sfix precisions
FIXED_F = 16
FIXED_K = 48
sfix.set_precision(FIXED_F, FIXED_K)
cfix.set_precision(FIXED_F, FIXED_K)

### set necessary parameters
MAX_ARRAY_SIZE = 100000
MAX_OUTPUT_SIZE = 10
# PORT_NUM = 14000
MAX_NUM_CLIENTS = 3
MAX_NBITS = 14
NULL = -2147483648

PORT_NUM = public_input()

### Accept client connections
def accept_client():
    client_socket_id = accept_client_connection(PORT_NUM)
    # print_ln("The client socket id is %s", client_socket_id)
    return client_socket_id

def close_connections(number_clients):
    @for_range(number_clients)
    def _(i):
        closeclientconnection(i)

### Receive private input from client_socket_id
def client_input(client_sockets, num_clients, array_size):
    client_inputs = sfix.Matrix(MAX_NUM_CLIENTS, MAX_ARRAY_SIZE)
    tmp_array = Array(1, sint)
    @for_range(num_clients)
    def _(i):
        @for_range(array_size)
        def _(j):
            tmp_array = sint.receive_from_client(1, client_sockets[i])
            client_inputs[i][j] = sfix._new(tmp_array[0])
    return client_inputs

### receive client 0's public parameters
def client_public_parameters(client_socket_id):
    array_size_arr = Array(1, cint)
    array_size_arr[0] = cint.read_from_socket(client_socket_id, 1)
    return array_size_arr[0]

### logistic activation func
def logistic_func(inputs, array_size):
    result = Array(MAX_ARRAY_SIZE, sfix)
    @for_range(array_size)
    def _(j):
        result[j] = ml.sigmoid(inputs[j])
        # print_ln("The result[j] sigmoid function is %s", result[j].reveal())
    return result

### relu activation and derivative func
def relu_deriv_func(inputs, array_size):
    result = Array(MAX_ARRAY_SIZE, sfix)
    @for_range(array_size)
    def _(j):
        @if_e(inputs[j].reveal() < 0)
        def _():
            result[j] = 0.0
            result[j + array_size] = 0.0
        @else_
        def _():
            result[j] = inputs[j]
            result[j + array_size] = 1.0
    return result

### relu activation func
def relu_func(inputs, array_size):
    result = Array(MAX_ARRAY_SIZE, sfix)
    @for_range(array_size)
    def _(j):
        @if_e(inputs[j].reveal() < 0)
        def _():
            result[j] = 0.0
        @else_
        def _():
            result[j] = inputs[j]
    return result

### identity activation derivative func
def identity_deriv_func(inputs, array_size):
    result = Array(MAX_ARRAY_SIZE, sfix)
    @for_range(array_size)
    def _(j):
        result[j] = inputs[j]
        result[j + array_size] = 1.0
    return result

### identity activation func
def identity_func(inputs, array_size):
    result = Array(MAX_ARRAY_SIZE, sfix)
    @for_range(array_size)
    def _(j):
        result[j] = inputs[j]
    return result

### softmax activation func (similar to vfl_decision_tree compute_softmax_label, to merge)
def softmax_func(inputs, sample_size, num_outputs):
    result = Array(MAX_ARRAY_SIZE, sfix)
    # note that inputs should be with sample_size * num_outputs elements
    print_ln('inputs[0] = %s', inputs[0].reveal())
    @for_range(sample_size)
    def _(i):
        temp_softmax_sum = Array(1, sfix)
        temp_softmax_sum[0] = 0.0
        temp_softmax_output = Array(MAX_OUTPUT_SIZE, sfix)
        # compute softmax function
        @for_range(num_outputs)
        def _(j):
            temp_softmax_output[j] = ml.exp(inputs[j * sample_size + i])
            temp_softmax_sum[0] = temp_softmax_sum[0] + temp_softmax_output[j]
        # assign new values
        @for_range(num_outputs)
        def _(j):
            result[j * sample_size + i] = temp_softmax_output[j] / temp_softmax_sum[0]

        @if_(i == 0)
        def _():
            print_ln('temp_softmax_sum[0] = %s', temp_softmax_sum[0].reveal())
            print_ln('temp_softmax_output[0] = %s', temp_softmax_output[0].reveal())
            print_ln('temp_softmax_output[1] = %s', temp_softmax_output[1].reveal())
            print_ln('result[0] = %s', result[0].reveal())

    print_ln('Finish computation of softmax function')
    return result


### compute activation and derivative activation
def comp_act_deriv(sample_size, num_outputs, act_func_id, clients_act_inputs):
    input_array_size = sample_size * num_outputs
    act_res = Array(MAX_ARRAY_SIZE, sfix)
    act_deriv_res = Array(MAX_ARRAY_SIZE, sfix)
    # logistic activation function
    @if_(act_func_id == 0)
    def _():
        act_res = logistic_func(clients_act_inputs, input_array_size)
        @for_range(input_array_size)
        def _(i):
            act_deriv_res[i] = act_res[i]
            act_deriv_res[i + input_array_size] = act_res[i] * (1 - act_res[i])

    # relu activation function
    @if_(act_func_id == 1)
    def _():
        act_deriv_res = relu_deriv_func(clients_act_inputs, input_array_size)

    # identity activation function
    @if_(act_func_id == 2)
    def _():
        act_deriv_res = identity_deriv_func(clients_act_inputs, input_array_size)

    # softmax activation function
    @if_(act_func_id == 3)
    def _():
        act_res = softmax_func(clients_act_inputs, sample_size, num_outputs)
        @for_range(input_array_size)
        def _(i):
            act_deriv_res[i] = act_res[i]
            # derivative use dummy 1.0, will not be used
            act_deriv_res[i + input_array_size] = 1.0

    return act_deriv_res

### compute activation only
def comp_act(sample_size, num_outputs, act_func_id, clients_act_inputs):
    input_array_size = sample_size * num_outputs
    act_res = Array(MAX_ARRAY_SIZE, sfix)
    # logistic activation function
    @if_(act_func_id == 0)
    def _():
        act_res = logistic_func(clients_act_inputs, input_array_size)

    # relu activation function
    @if_(act_func_id == 1)
    def _():
        act_res = relu_func(clients_act_inputs, input_array_size)

    # identity activation function
    @if_(act_func_id == 2)
    def _():
        act_res = identity_func(clients_act_inputs, input_array_size)

    # softmax activation function
    @if_(act_func_id == 3)
    def _():
        act_res = softmax_func(clients_act_inputs, sample_size, num_outputs)

    return act_res

def write_result_to_clients(sockets, number_clients, result, array_size):
    """
        Send secret share of result to all clients.
        (should split the result array into number_clients shares, and send each share to each client)
    """

    sint_result = Array(MAX_ARRAY_SIZE, sint)
    @for_range(array_size)
    def _(i):
        sint_result[i] = result[i].v
        #print_ln('sint_result[%s] = %s', i, sint_result[i].reveal())

    # split sint_result to number_clients parts and send each part to each client
    sint_result_matrix = sint.Matrix(number_clients, MAX_ARRAY_SIZE)
    temp_sum = Array(1, sint)
    @for_range(array_size)
    def outer_loop(j):
        temp_sum[0] = 0
        @for_range(number_clients)
        def inner_loop(i):
            @if_e(i < number_clients - 1)
            def _():
                random_ij = sint.get_random_int(MAX_NBITS)
                temp_sum[0] = temp_sum[0] + random_ij
                sint_result_matrix[i][j] = random_ij
            @else_
            def _():
                sint_result_matrix[i][j] = sint_result[j] - temp_sum[0]

    """
        @for_range(ARRAY_SIZE)
        def _(j):
            @for_range(number_clients)
            def _(i):
                print_ln('sint_result_matrix[%s][%s] = %s', i, j, sint_result_matrix[i][j].reveal())
    """

    print_ln('begin to write shares to each client')
    @for_range(number_clients)
    def loop_body(i):
        # print_ln('socket[%s] = %s', i, sockets[i])
        sint.write_shares_to_socket(sockets[i], sint_result_matrix[i])

    sint_result.delete()
    sint_result_matrix.delete()
    temp_sum.delete()


def main():
    """
        Listen in a while loop for the falcon clients to join the mpc computation.
        Once maximum number of falcon clients reached, run the computation and return the result.
    """

    # Start listening on a port for falcon client socket connections
    listen_for_clients(PORT_NUM)
    print_ln('Listening for socket connections on base port %s', PORT_NUM)

    # Do while loop for iteratively logistic function computation
    @do_while
    def computing_loop():
        print_ln('Starting a new iteration.')

        # Clients socket id (integer).
        client_sockets = Array(MAX_NUM_CLIENTS, regint)

        # Number of clients
        # number_clients = MemValue(regint(0))

        # Clients secret inputs
        client_values = sfix.Matrix(MAX_NUM_CLIENTS, MAX_ARRAY_SIZE)

        # Keep track of received inputs
        seen = Array(MAX_NUM_CLIENTS, regint)
        seen.assign_all(0)

        # step 1: Loop round waiting for each client to connect
        @do_while
        def client_connections():
            client_id = accept_client()
            @if_(client_id >= MAX_NUM_CLIENTS)
            def _():
                print_ln('client id too high')
                crash()
            client_sockets[client_id] = client_id
            seen[client_id] = 1
            return sum(seen) < MAX_NUM_CLIENTS

        # receive public values:
        #   1. activation (compute both activation and derivative activation) or activation_fast (only compute activation)
        #   2. sample_size of the current iteration
        #   3. number of outputs of current layer
        #   4. activation function: logistic, relu, softmax, identity
        comp_id = client_public_parameters(client_sockets[0])
        sample_size = client_public_parameters(client_sockets[0])
        num_outputs = client_public_parameters(client_sockets[0])
        act_func_id = client_public_parameters(client_sockets[0])
        print_ln('comp_id = %s', comp_id)
        print_ln('sample_size = %s', sample_size)
        print_ln('num_outputs = %s', num_outputs)
        print_ln('act_func_id = %s', act_func_id)

        # receive clients' input private values
        clients_act_inputs = sfix.Array(MAX_ARRAY_SIZE)
        private_input_size = sample_size * num_outputs
        # init the values
        @for_range(private_input_size)
        def _(i):
            clients_act_inputs[i] = 0
        client_values = client_input(client_sockets, MAX_NUM_CLIENTS, private_input_size)
        @for_range(MAX_NUM_CLIENTS)
        def _(client_id):
            @for_range(private_input_size)
            def _(i):
                clients_act_inputs[i] = clients_act_inputs[i] + client_values[client_id][i]

        # if compute both activation and derivative activation
        @if_(comp_id == 0)
        def _():
            # compute activation and derivative activation
            act_and_deriv = Array(MAX_ARRAY_SIZE, sfix)
            act_and_deriv = comp_act_deriv(sample_size, num_outputs, act_func_id, clients_act_inputs)
            write_result_to_clients(client_sockets, MAX_NUM_CLIENTS, act_and_deriv, 2 * private_input_size)

        # if compute only activation
        @if_(comp_id == 1)
        def _():
            # compute activation and derivative activation
            act = Array(MAX_ARRAY_SIZE, sfix)
            act = comp_act(sample_size, num_outputs, act_func_id, clients_act_inputs)
            write_result_to_clients(client_sockets, MAX_NUM_CLIENTS, act, private_input_size)

        client_sockets.delete()
        client_values.delete()
        seen.delete()

        close_connections(MAX_NUM_CLIENTS)

        return True

main()